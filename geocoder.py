# -*- coding: utf-8 -*-
"""Geocoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r65l2U0jR4_DHwwvLZ68fSH9ZPseuegW
"""

!pip install --upgrade -q gspread

"""# Geocoding

* To convert addresses to lat/long, use geocodio spreadsheet geocoder tool online at [Geocodio](https://dash.geocod.io/). 
* This tool allow 2500 address geocode requests per day free of charge, and charges for requests in excess of 2500 per day.
* See Evernote for account information.
"""

from google.colab import auth
import pandas as pd
import gspread
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gc = gspread.authorize(GoogleCredentials.get_application_default())


def sheet_import(spreadsheet, sheet_name):
  sh = gc.open(spreadsheet)
  worksheet = sh.worksheet(sheet_name)
  values = worksheet.get_all_values()
  headers = values.pop(0)
  df = pd.DataFrame(values, columns=headers)
  return df

data = sheet_import('Upward_Participants_Geocodio', '3-2-2020')

# get_all_values gives a list of rows.
#rows = worksheet.get_all_values()
#print(rows)

# Convert to a DataFrame and render.
#data = pd.DataFrame.from_records(rows)

data.head()

# General stats
print('Number of values within each column.')
print(data.count())

#Count Unique Addresses by house number, street name
print('Number of unique addresses. ')
print(len(data['Address 1'].unique()))

# Count unique cities
print('Number of unique cities listed. ')
print(len(data['Address 3'].unique()))

# Unique School district LEA codes
print('Number of school district LEA codes. ')
print(len(data['Unified School District LEA code'].unique()))

"""# Data Visualization"""

lats = []
longs = []

# Yields a tuple of column name and series for each column in the dataframe
for (columnName, columnData) in data[['Latitude']].iteritems():
   #print('Colunm Name : ', columnName)
   lats.append(columnData)
   #print('Column Contents : ', columnData.values)

for (columnName, columnData) in data[['Longitude']].iteritems():
   #print('Colunm Name : ', columnName)
   longs.append(columnData)
   #print('Column Contents : ', columnData.values)

pd.set_option('display.max_rows', 118)

#coordinates = zip(lats, longs)
print(lats)
print(longs)

"""## Plot Lat/Long over Map"""

! pip install gmplot

import gmplot


heat_map_lats = [34.052858, 34.052858, 34.173015, 34.173015, 34.092163, 34.07104, 34.07104, 34.082608, 34.082608, 34.076484, 34.129427, 34.129427, 34.129427, 34.105789, 34.105789, 34.105789, 34.022109, 34.048945, 34.047005, 34.11243, 34.072039, 34.054131, 34.010239, 34.072039, 34.082786, 34.074174, 34.1028, 34.179073, 34.179073, 34.131846, 34.091501, 34.125837, 34.106162, 34.107206, 34.093309, 34.036507, 34.042835, 34.042835, 34.073016, 34.073016, 34.073016, 34.12218, 34.12218, 34.107806, 34.073016, 33.911206, 34.046791, 34.046791, 34.044826, 33.98029, 33.98029, 34.07104, 34.111958, 34.111958, 34.129427, 34.13683, 34.13683, 34.136834, 34.052858, 34.042228, 34.228775, 34.074496, 34.07639, 34.022109, 34.1028, 34.039861, 34.068428, 34.093416, 34.09824, 33.954319, 34.058444, 34.039861, 34.008346, 34.065482, 34.034975, 34.02496, 34.02496, 34.02496, 34.203499, 34.074739, 34.129892, 34.129892, 34.129892, 34.008346, 34.111631, 34.036118, 34.148646, 34.094951, 34.040831, 34.021662, 34.129427, 33.999574, 34.07068, 34.048945, 33.927591, 34.096999, 34.087968, 34.134186, 34.134186, 34.126255, 34.079453, 34.139766, 34.139766, 33.99586, 34.022455, 34.076224, 34.058005, 33.981414, 34.054734, 34.054734, 34.054734, 34.209369, 33.953141, 33.953141, 34.066826, 34.141022, 34.056491, 33.992732]
heat_map_longs = [-84.644038, -84.644038, -84.568983, -84.568983, -84.595914, -84.576753, -84.576753, -84.624869, -84.624869, -84.611665, -84.681334, -84.681334, -84.681334, -84.657771, -84.657771, -84.657771, -84.743083, -84.565437, -84.63549, -84.604432, -84.648133, -84.617609, -84.66433, -84.648133, -84.615909, -84.663428, -84.580739, -84.485464, -84.485464, -84.530462, -84.630751, -84.693343, -84.537393, -84.650116, -84.578197, -84.670699, -84.670223, -84.670223, -84.670825, -84.670825, -84.670825, -84.604495, -84.604495, -84.61427, -84.670825, -84.845915, -84.624038, -84.624038, -84.761592, -84.782179, -84.782179, -84.576753, -84.612411, -84.612411, -84.681334, -84.370827, -84.370827, -84.370827, -84.644038, -84.627815, -84.750421, -84.530752, -84.787341, -84.743083, -84.580739, -84.638642, -84.659683, -84.573397, -84.60044, -84.825985, -84.563246, -84.638642, -84.628356, -84.620709, -84.662971, -84.598825, -84.598825, -84.598825, -84.636598, -84.67297, -84.529425, -84.529425, -84.529425, -84.628356, -84.612517, -84.61293, -84.605005, -84.633451, 84.641909, -84.767956, -84.681334, -84.714023, -84.589406, -84.565437, -84.473259, -84.484834, -84.552026, -84.614746, -84.614746, -84.596126, -84.611636, -84.583289, -84.583289, -84.601766, -84.666479, -84.609411, -84.762, -84.782168, -84.559077, -84.559077, -84.559077, -84.42957, -84.772309, -84.772309, -84.745176, -84.58082, -84.776277, -84.710899]



# Map center
gmap = gmplot.GoogleMapPlotter(34.103010, -84.651400, 13)

# Choose which plot type is desired and uncomment.
#gmap.scatter(top_attraction_lats, top_attraction_lons, 'cornflowerblue', size=40, marker=False) # How to draw scatter points.
gmap.scatter(heat_map_lats, heat_map_longs, 'cornflowerblue', size=120, marker=False) # How to draw a heatmap.
#gmap.plot(top_attraction_lats, top_attraction_lons, 'cornflowerblue', size=40, marker=False) # How to draw plot.
#gmap.marker(top_attraction_lats, top_attraction_lons, 'cornflowerblue', size=40, marker=False) # How to draw drop pins.
#gmap.grid(top_attraction_lats, top_attraction_lons, 'cornflowerblue', size=40, marker=False) # How to draw grid lines.

# Draw
gmap.draw("upwards_map.html")